Q1.
#include <stdio.h>
#include <stdbool.h>

#define MAX_FRAMES 10
#define INFINITY 9999

int main() {
    int referenceString[] = {8, 5, 7, 8, 5, 7, 2, 3, 7, 3, 5, 9, 4, 6, 2};
    int n = sizeof(referenceString) / sizeof(referenceString[0]);

    int frames[MAX_FRAMES];
    int frameCount = 0;
    int pageFaults = 0;

    for (int i = 0; i < n; ++i) {
        int page = referenceString[i];
        int found = -1;
        for (int j = 0; j < frameCount; ++j) {
            if (frames[j] == page) {
                found = j;
                break;
            }
        }
        if (found == -1) {
            if (frameCount < MAX_FRAMES) {
                frames[frameCount++] = page;
            } else {
                int index[MAX_FRAMES];
                for (int j = 0; j < MAX_FRAMES; ++j) {
                    index[j] = INFINITY;
                    for (int k = i + 1; k < n; ++k) {
                        if (frames[j] == referenceString[k]) {
                            index[j] = k;
                            break;
                        }
                    }
                }

                int maxIndex = 0;
                int max = index[0];
                for (int j = 1; j < frameCount; ++j) {
                    if (index[j] > max) {
                        max = index[j];
                        maxIndex = j;
                    }
                }

                frames[maxIndex] = page;
            }
            ++pageFaults;
        }

        printf("Page %d -> ", page);
        for (int j = 0; j < frameCount; ++j) {
            printf("%d ", frames[j]);
        }
        printf("\n");
    }

    printf("\nTotal Page Faults using Optimal: %d\n", pageFaults);

    return 0;
}

-----------------------------------------------------------------------------------------------------------
Q2.
#include <stdio.h>

struct Process {
    int pid;
    int arrival_time;
    int burst_time;
};

void findWaitingTime(int n, struct Process processes[]) {
    int waiting_time[n], total_waiting_time = 0;

    waiting_time[0] = 0;
    for (int i = 1; i < n; i++) {
        waiting_time[i] = waiting_time[i - 1] + processes[i - 1].burst_time - processes[i].arrival_time;
        if (waiting_time[i] < 0) {
            waiting_time[i] = 0;
        }
        total_waiting_time += waiting_time[i];
    }

    printf("\nGantt Chart: ");
    printf(" %d ", processes[0].arrival_time);
    for (int i = 0; i < n; i++) {
        printf("P%d-%d ", processes[i].pid, processes[i].arrival_time + processes[i].burst_time);
    }

    printf("\n\nProcess\tWaiting Time\tTurnaround Time\n");
    int total_turnaround_time = 0;
    for (int i = 0; i < n; i++) {
        int turnaround_time = processes[i].burst_time + waiting_time[i];
        total_turnaround_time += turnaround_time;
        printf("P%d\t%d\t\t%d\n", processes[i].pid, waiting_time[i], turnaround_time);
    }

    printf("\nAverage Waiting Time = %.2f", (float)total_waiting_time / n);
    printf("\nAverage Turnaround Time = %.2f\n", (float)total_turnaround_time / n);
}

int main() {
    int n;
    printf("Enter the number of processes: ");
    scanf("%d", &n);

    struct Process processes[n];

    printf("Enter arrival time and burst time for each process:\n");
    for (int i = 0; i < n; i++) {
        processes[i].pid = i + 1;
        printf("Arrival time for process P%d: ", i + 1);
        scanf("%d", &processes[i].arrival_time);
        printf("Burst time for process P%d: ", i + 1);
        scanf("%d", &processes[i].burst_time);
    }

    findWaitingTime(n, processes);

    return 0;
}

