Q1.
#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/wait.h>
#include <dirent.h>
#include <string.h>

#define MAX_COMMAND_LENGTH 100
#define MAX_TOKENS 10

void listFiles(char *dirname, int printNames) {
    DIR *dir;
    struct dirent *entry;

    dir = opendir(dirname);
    if (dir == NULL) {
        printf("Directory not found.\n");
        return;
    }

    while ((entry = readdir(dir)) != NULL) {
        if (printNames) {
            printf("%s\n", entry->d_name);
        }
    }

    closedir(dir);
}

int main() {
    char command[MAX_COMMAND_LENGTH];
    char *tokens[MAX_TOKENS];
    char *token;
    int tokenCount;

    while (1) {
        printf("myshell$ ");
        fgets(command, sizeof(command), stdin);
        command[strcspn(command, "\n")] = '\0'; 

        tokenCount = 0;
        token = strtok(command, " ");
        while (token != NULL && tokenCount < MAX_TOKENS - 1) {
            tokens[tokenCount++] = token;
            token = strtok(NULL, " ");
        }
        tokens[tokenCount] = NULL;

        if (strcmp(tokens[0], "list") == 0) {
            if (tokenCount == 3 && strcmp(tokens[1], "f") == 0) {
                listFiles(tokens[2], 1);
            } else if (tokenCount == 3 && strcmp(tokens[1], "n") == 0) {
                listFiles(tokens[2], 0);
            } else {
                printf("Invalid list command format.\n");
            }
        } else {
            pid_t pid = fork();
            if (pid < 0) {
                perror("Fork failed");
                exit(EXIT_FAILURE);
            } else if (pid == 0) {
                // Child process
                if (execvp(tokens[0], tokens) < 0) {
                    perror("Command execution failed");
                    exit(EXIT_FAILURE);
                }
            } else {
                // Parent process
                wait(NULL);
            }
        }
    }

    return 0;
}

--------------------------------------------------------------------------------------------------
Q2.
#include <stdio.h>

#define MAX_PROCESSES 10

void roundRobin(int n, int arrival[], int burst[], int quantum) {
    int remaining[MAX_PROCESSES];
    int waitingTime[MAX_PROCESSES] = {0};
    int turnaroundTime[MAX_PROCESSES] = {0};

    // Copy burst times to remaining times
    for (int i = 0; i < n; ++i) {
        remaining[i] = burst[i];
    }

    int currentTime = 0;
    int completed = 0;

    while (1) {
        int done = 1;

        for (int i = 0; i < n; ++i) {
            if (remaining[i] > 0) {
                done = 0;

                if (remaining[i] > quantum) {
                    currentTime += quantum;
                    remaining[i] -= quantum;
                } else {
                    currentTime += remaining[i];
                    waitingTime[i] = currentTime - burst[i] - arrival[i];
                    remaining[i] = 0;
                    turnaroundTime[i] = currentTime - arrival[i];
                    completed++;
                }
            }
        }

        if (done == 1) {
            break;
        }
    }

    printf("Process\t Turnaround Time\t Waiting Time\n");
    double totalTurnaround = 0, totalWaiting = 0;
    for (int i = 0; i < n; ++i) {
        printf("%d\t\t%d\t\t\t%d\n", i + 1, turnaroundTime[i], waitingTime[i]);
        totalTurnaround += turnaroundTime[i];
        totalWaiting += waitingTime[i];
    }

    printf("\nAverage Turnaround Time: %.2f\n", totalTurnaround / n);
    printf("Average Waiting Time: %.2f\n", totalWaiting / n);
}

int main() {
    int n, quantum;
    printf("Enter number of processes: ");
    scanf("%d", &n);

    int arrival[MAX_PROCESSES];
    int burst[MAX_PROCESSES];

    printf("Enter arrival time and burst time for each process:\n");
    for (int i = 0; i < n; ++i) {
        printf("Arrival time for process %d: ", i + 1);
        scanf("%d", &arrival[i]);
        printf("Burst time for process %d: ", i + 1);
        scanf("%d", &burst[i]);
    }

    printf("Enter time quantum: ");
    scanf("%d", &quantum);

    roundRobin(n, arrival, burst, quantum);

    return 0;
}

