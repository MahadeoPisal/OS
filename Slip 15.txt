Q1.
#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/wait.h>
#include <dirent.h>
#include <string.h>

#define MAX_COMMAND_LENGTH 100
#define MAX_TOKENS 10

void listFiles(char *dirname, int printNames) {
    DIR *dir;
    struct dirent *entry;

    dir = opendir(dirname);
    if (dir == NULL) {
        printf("Directory not found.\n");
        return;
    }

    while ((entry = readdir(dir)) != NULL) {
        if (printNames) {
            printf("%s\n", entry->d_name);
        }
    }

    closedir(dir);
}

int main() {
    char command[MAX_COMMAND_LENGTH];
    char *tokens[MAX_TOKENS];
    char *token;
    int tokenCount;

    while (1) {
        printf("myshell$ ");
        fgets(command, sizeof(command), stdin);
        command[strcspn(command, "\n")] = '\0'; 

        tokenCount = 0;
        token = strtok(command, " ");
        while (token != NULL && tokenCount < MAX_TOKENS - 1) {
            tokens[tokenCount++] = token;
            token = strtok(NULL, " ");
        }
        tokens[tokenCount] = NULL;

        if (strcmp(tokens[0], "list") == 0) {
            if (tokenCount == 3 && strcmp(tokens[1], "f") == 0) {
                listFiles(tokens[2], 1);
            } else if (tokenCount == 3 && strcmp(tokens[1], "n") == 0) {
                listFiles(tokens[2], 0);
            } else {
                printf("Invalid list command format.\n");
            }
        } else {
            pid_t pid = fork();
            if (pid < 0) {
                perror("Fork failed");
                exit(EXIT_FAILURE);
            } else if (pid == 0) {
                // Child process
                if (execvp(tokens[0], tokens) < 0) {
                    perror("Command execution failed");
                    exit(EXIT_FAILURE);
                }
            } else {
                // Parent process
                wait(NULL);
            }
        }
    }

    return 0;
}

---------------------------------------------------------------------------------------------------
Q2.
#include <stdio.h>
#include <stdbool.h>

struct Process {
    int pid;
    int arrival_time;
    int burst_time;
    int remaining_time;
    bool completed;
};

void findWaitingTime(int n, struct Process processes[]) {
    int currentTime = 0, completedProcesses = 0;

    while (completedProcesses < n) {
        int shortestJob = -1, minBurst = 9999;

        for (int i = 0; i < n; i++) {
            if (!processes[i].completed && processes[i].arrival_time <= currentTime && processes[i].remaining_time < minBurst) {
                shortestJob = i;
                minBurst = processes[i].remaining_time;
            }
        }

        if (shortestJob == -1) {
            currentTime++;
            continue;
        }

        printf(" %d ", currentTime);
        processes[shortestJob].remaining_time--;

        if (processes[shortestJob].remaining_time == 0) {
            completedProcesses++;
            processes[shortestJob].completed = true;
            int turnaround_time = currentTime + 1 - processes[shortestJob].arrival_time;
            int waiting_time = turnaround_time - processes[shortestJob].burst_time;
            printf("P%d(%d)-%d ", processes[shortestJob].pid, processes[shortestJob].burst_time, currentTime + 1);
        }

        currentTime++;
    }
}

void findTurnaroundTime(int n, struct Process processes[]) {
    printf("\nProcess\tTurnaround Time\tWaiting Time\n");
    int total_waiting_time = 0, total_turnaround_time = 0;

    for (int i = 0; i < n; i++) {
        int turnaround_time = processes[i].burst_time;
        int waiting_time = turnaround_time - processes[i].burst_time;
        total_waiting_time += waiting_time;
        total_turnaround_time += turnaround_time;
        printf("P%d\t%d\t\t%d\n", processes[i].pid, turnaround_time, waiting_time);
    }

    printf("\nAverage Waiting Time = %.2f", (float)total_waiting_time / n);
    printf("\nAverage Turnaround Time = %.2f\n", (float)total_turnaround_time / n);
}

int main() {
    int n;
    printf("Enter the number of processes: ");
    scanf("%d", &n);

    struct Process processes[n];

    printf("Enter arrival time and burst time for each process:\n");
    for (int i = 0; i < n; i++) {
        processes[i].pid = i + 1;
        printf("Arrival time for process P%d: ", i + 1);
        scanf("%d", &processes[i].arrival_time);
        printf("Burst time for process P%d: ", i + 1);
        scanf("%d", &processes[i].burst_time);
        processes[i].remaining_time = processes[i].burst_time;
        processes[i].completed = false;
    }

    printf("\nGantt Chart: ");
    findWaitingTime(n, processes);
    printf("\n\n");
    findTurnaroundTime(n, processes);

    return 0;
}

