Q1.
#include <stdio.h>
#include <unistd.h>

int main() {
    pid_t pid = fork();

    if (pid < 0) {
        printf("Fork failed\n");
        return 1;
    } else if (pid == 0) {
        printf("I am Child Process\n");
        printf("Child PID: %d\n", getpid());
    } else {
        printf("I am Parent Process\n");
        printf("Parent PID: %d\n", getpid());
    }

    return 0;
}

-----------------------------------------------------------------------
Q2.
#include <stdio.h>
#include <stdlib.h>

struct Process {
    int pid;
    int arrival_time;
    int burst_time;
    int priority;
    int remaining_time;
    int waiting_time;
    int turnaround_time;
    int io_time;
};

void generateRandomBurst(struct Process *process) {
    process->burst_time = rand() % 10 + 1; // Generating burst time from 1 to 10 units
}

void priorityScheduling(struct Process processes[], int n) {
    int currentTime = 0, completedProcesses = 0, currentProcess = -1;

    while (completedProcesses < n) {
        int highestPriority = 9999;

        for (int i = 0; i < n; i++) {
            if (processes[i].arrival_time <= currentTime && processes[i].remaining_time > 0 && processes[i].priority < highestPriority) {
                highestPriority = processes[i].priority;
                currentProcess = i;
            }
        }

        if (currentProcess == -1) {
            currentTime++;
            continue;
        }

        if (processes[currentProcess].remaining_time == processes[currentProcess].burst_time) {
            printf(" %d ", currentTime);
        }

        processes[currentProcess].remaining_time--;

        if (processes[currentProcess].remaining_time == 0) {
            completedProcesses++;
            processes[currentProcess].turnaround_time = currentTime + 1 - processes[currentProcess].arrival_time;
            processes[currentProcess].waiting_time = processes[currentProcess].turnaround_time - processes[currentProcess].burst_time;
            printf("P%d-%d ", processes[currentProcess].pid, currentTime + 1);
        }

        if (processes[currentProcess].io_time < 2) {
            processes[currentProcess].io_time++;
            currentTime++;
        } else {
            processes[currentProcess].io_time = 0;
            generateRandomBurst(&processes[currentProcess]);
        }
    }
}

int main() {
    int n;
    printf("Enter the number of processes: ");
    scanf("%d", &n);

    struct Process processes[n];

    printf("Enter arrival time, priority for each process:\n");
    for (int i = 0; i < n; i++) {
        processes[i].pid = i + 1;
        printf("Arrival time for process P%d: ", i + 1);
        scanf("%d", &processes[i].arrival_time);
        printf("Priority for process P%d: ", i + 1);
        scanf("%d", &processes[i].priority);
        processes[i].remaining_time = 0;
        processes[i].waiting_time = 0;
        processes[i].turnaround_time = 0;
        processes[i].io_time = 0;
    }

    priorityScheduling(processes, n);

    return 0;
}

