Q1.
#include <stdio.h>

#define MAX_FRAMES 10

int main() {
    int referenceString[] = {3, 4, 5, 6, 3, 4, 7, 3, 4, 5, 6, 7, 2, 4, 6};
    int n = sizeof(referenceString) / sizeof(referenceString[0]);

    int frames[MAX_FRAMES];
    int frameCount = 0;
    int pageFaults = 0;

    for (int i = 0; i < n; ++i) {
        int page = referenceString[i];
        int found = 0;

        for (int j = 0; j < frameCount; ++j) {
            if (frames[j] == page) {
                found = 1;
                break;
            }
        }

        if (!found) {
            if (frameCount < MAX_FRAMES) {
                frames[frameCount++] = page;
            } else {
                for (int j = 0; j < frameCount - 1; ++j) {
                    frames[j] = frames[j + 1];
                }
                frames[frameCount - 1] = page;
            }
            ++pageFaults;
        }

        printf("Page %d -> ", page);
        for (int j = 0; j < frameCount; ++j) {
            printf("%d ", frames[j]);
        }
        printf("\n");
    }

    printf("\nTotal Page Faults using FIFO: %d\n", pageFaults);

    return 0;
}

----------------------------------------------------------------------------------------
Q2.
#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/wait.h>
#include <dirent.h>
#include <string.h>

#define MAX_COMMAND_LENGTH 100
#define MAX_TOKENS 10

void listFiles(char *dirname, int printNames) {
    DIR *dir;
    struct dirent *entry;

    dir = opendir(dirname);
    if (dir == NULL) {
        printf("Directory not found.\n");
        return;
    }

    while ((entry = readdir(dir)) != NULL) {
        if (printNames) {
            printf("%s\n", entry->d_name);
        }
    }

    closedir(dir);
}

int main() {
    char command[MAX_COMMAND_LENGTH];
    char *tokens[MAX_TOKENS];
    char *token;
    int tokenCount;

    while (1) {
        printf("myshell$ ");
        fgets(command, sizeof(command), stdin);
        command[strcspn(command, "\n")] = '\0'; 

        tokenCount = 0;
        token = strtok(command, " ");
        while (token != NULL && tokenCount < MAX_TOKENS - 1) {
            tokens[tokenCount++] = token;
            token = strtok(NULL, " ");
        }
        tokens[tokenCount] = NULL;

        if (strcmp(tokens[0], "list") == 0) {
            if (tokenCount == 3 && strcmp(tokens[1], "f") == 0) {
                listFiles(tokens[2], 1);
            } else if (tokenCount == 3 && strcmp(tokens[1], "n") == 0) {
                listFiles(tokens[2], 0);
            } else {
                printf("Invalid list command format.\n");
            }
        } else {
            pid_t pid = fork();
            if (pid < 0) {
                perror("Fork failed");
                exit(EXIT_FAILURE);
            } else if (pid == 0) {
                // Child process
                if (execvp(tokens[0], tokens) < 0) {
                    perror("Command execution failed");
                    exit(EXIT_FAILURE);
                }
            } else {
                // Parent process
                wait(NULL);
            }
        }
    }

    return 0;
}

