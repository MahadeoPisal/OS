Q1.
#include <stdio.h>
#include <stdbool.h>

#define MAX_FRAMES 10

int reference_string[] = {3, 4, 5, 4, 3, 4, 7, 2, 4, 5, 6, 7, 2, 4, 6};
int reference_length = sizeof(reference_string) / sizeof(reference_string[0]);

struct Page {
    int page_number;
    int frequency;
};

struct PageTable {
    struct Page pages[MAX_FRAMES];
    int count;
};

void initPageTable(struct PageTable *page_table) {
    page_table->count = 0;
}

bool isPageInTable(struct PageTable *page_table, int page_number) {
    for (int i = 0; i < page_table->count; i++) {
        if (page_table->pages[i].page_number == page_number) {
            return true;
        }
    }
    return false;
}

int findLFUPage(struct PageTable *page_table) {
    int min_frequency = page_table->pages[0].frequency;
    int min_index = 0;

    for (int i = 1; i < page_table->count; i++) {
        if (page_table->pages[i].frequency < min_frequency) {
            min_frequency = page_table->pages[i].frequency;
            min_index = i;
        }
    }

    return min_index;
}

void replacePage(struct PageTable *page_table, int page_number) {
    int index = findLFUPage(page_table);
    page_table->pages[index].page_number = page_number;
    page_table->pages[index].frequency = 1;
}

int main() {
    int num_frames;
    printf("Enter the number of frames: ");
    scanf("%d", &num_frames);

    struct PageTable page_table;
    initPageTable(&page_table);

    int page_faults = 0;

    for (int i = 0; i < reference_length; i++) {
        int page_number = reference_string[i];

        if (!isPageInTable(&page_table, page_number)) {
            if (page_table.count < num_frames) {
                page_table.pages[page_table.count].page_number = page_number;
                page_table.pages[page_table.count].frequency = 1;
                page_table.count++;
            } else {
                replacePage(&page_table, page_number);
            }

            page_faults++;
        } else {
            for (int j = 0; j < page_table.count; j++) {
               if (page_table.pages[j].page_number == page_number) {
                    page_table.pages[j].frequency++;
                    break;
                }
            }
        }

        printf("Page %d -> ", page_number);
        for (int j = 0; j < page_table.count; j++) {
            printf("%d(%d) ", page_table.pages[j].page_number, page_table.pages[j].frequency);
        }
        printf("\n");
    }

    printf("Total page faults using LFU: %d\n", page_faults);

    return 0;
}

---------------------------------------------------------------------------------------------------------
Q2.
#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/wait.h>
#include <dirent.h>
#include <string.h>

#define MAX_COMMAND_LENGTH 100
#define MAX_TOKENS 10

void listFiles(char *dirname, int printNames) {
    DIR *dir;
    struct dirent *entry;

    dir = opendir(dirname);
    if (dir == NULL) {
        printf("Directory not found.\n");
        return;
    }

    while ((entry = readdir(dir)) != NULL) {
        if (printNames) {
            printf("%s\n", entry->d_name);
        }
    }

    closedir(dir);
}

int main() {
    char command[MAX_COMMAND_LENGTH];
    char *tokens[MAX_TOKENS];
    char *token;
    int tokenCount;

    while (1) {
        printf("myshell$ ");
        fgets(command, sizeof(command), stdin);
        command[strcspn(command, "\n")] = '\0'; 

        tokenCount = 0;
        token = strtok(command, " ");
        while (token != NULL && tokenCount < MAX_TOKENS - 1) {
            tokens[tokenCount++] = token;
            token = strtok(NULL, " ");
        }
        tokens[tokenCount] = NULL;

        if (strcmp(tokens[0], "list") == 0) {
            if (tokenCount == 3 && strcmp(tokens[1], "f") == 0) {
                listFiles(tokens[2], 1);
            } else if (tokenCount == 3 && strcmp(tokens[1], "n") == 0) {
                listFiles(tokens[2], 0);
            } else {
                printf("Invalid list command format.\n");
            }
        } else {
            pid_t pid = fork();
            if (pid < 0) {
                perror("Fork failed");
                exit(EXIT_FAILURE);
            } else if (pid == 0) {
                // Child process
                if (execvp(tokens[0], tokens) < 0) {
                    perror("Command execution failed");
                    exit(EXIT_FAILURE);
                }
            } else {
                // Parent process
                wait(NULL);
            }
        }
    }

    return 0;
}

